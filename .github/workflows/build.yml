name: Build and deploy

on:
  # Trigger the workflow on push to main branch
  push:
    branches:
      - main

  workflow_run:
    workflows: ["Run tests"]
    branches: [main]
    types:
      - completed

env:
  REGISTRY: ghcr.io

jobs:
  # Build docker images with docker compose and push to github registry
  build-push-to-registry:
    name: Docker compose build and push to ghcr
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    environment:
      name: prod
      url: https://cwx.jrenault.fr

    steps:
      - name: Git checkout
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create env file
        run: |
          touch .env
          echo "${{ secrets.SERVER_ENV_PROD }}" > .env

      - name: Build images
        run: docker compose -f docker-compose.prod.yml build

      - name: Push image to container registry
        run: docker compose -f docker-compose.prod.yml push

  deploy-on-server:
    name: Deploy app to vps
    runs-on: ubuntu-latest
    needs: build-push-to-registry
    environment:
      name: prod
      url: https://cwx.jrenault.fr

    steps:
      - name: Deploy to server over ssh
        uses: appleboy/ssh-action@master
        env:
          GITHUB_USERNAME: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SERVER_ENV_FILE: ${{ secrets.SERVER_ENV_PROD }}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: GITHUB_USERNAME, GITHUB_TOKEN, SERVER_ENV_FILE
          script: |
            echo $GITHUB_TOKEN | docker login ghcr.io -u $GITHUB_USERNAME --password-stdin
            cd cwx
            git checkout .env
            git pull
            echo "$SERVER_ENV_FILE" > .env
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml down
            docker system prune -f
            docker compose -f docker-compose.prod.yml up -d
            docker logout
